\data Bool | false | true

\data Empty

\data Unit | unit

\data \fixr 2 Either (A B : \Type)
  | inl' A
  | inr' B

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a)
  => coe (\lam i => B (p @ i)) b right

\func inv {A : \Type} {a a' : A} (p : a = a') : a' = a
  => transport (\lam x => x = a) p idp

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a'
  => transport (\lam x => f a = f x) p idp

-------------------------------------------------
-- The universe \Prop
-------------------------------------------------

\func isProp (A : \Type) => \Pi (x y : A) -> x = y

\data PropInType-to-Prop (A : \Type) (p : isProp A)
  | inc A
  \where {
    -- Here we prove that 'PropInType-to-Prop' satisfies 'isProp'.
    -- This results in 'PropInType-to-Prop A p : \Prop' for all 'A' and 'p'.
    -- Without '\use \level' 'PropInType-to-Prop A p' would not be in '\Prop'
    --   unless 'A' is in '\Prop'.
    \use \level dataIsProp {A : \Type} {p : isProp A}
                           (d1 d2 : PropInType-to-Prop A p) : d1 = d2 \elim d1, d2
      | inc a1, inc a2 => pmap inc (p a1 a2)
  }

-------------------------------------------------
-- The universe \Set
-------------------------------------------------

\func isSet (A : \Type) => \Pi (x y : A) -> isProp (x = y)

\func Set-to-SetInType (A : \Set \lp) : \Sigma (X : \Type \lp) (isSet X) =>
  (A, \lam (x y : A) => Path.inProp {x = y})

-------------------------------------------------
-- Universes \n-Type
-------------------------------------------------

\func bak => \Type 30 66
\func bak' => \66-Type 30
\func bak'' => \66-Type
\func bak''' => \62-Type

-- The predicate saying "A has level suc-l - 1"
\func hasLevel (A : \Type) (suc-l : Nat) : \Type \elim suc-l
  | 0 => isProp A
  | suc suc-l => \Pi (x y : A) -> (x = y) `hasLevel` suc-l

-------------------------------------------------
-- Truncated data, propositional truncation
-------------------------------------------------

-- Proposition 'Trunc A' says "A is nonempty".
\truncated \data Trunc (A : \Type) : \Prop
  | trunc A

-- Example: 'Trunc Nat'.
\func truncNat : trunc 0 = trunc 1 => Path.inProp (trunc 0) (trunc 1)

-- We can prove the negation of "Empty is nonempty".
\func Trunc-Empty (t : Trunc Empty) : Empty \elim t
  | trunc a => a


-- This does not typecheck!
\func ex1 (t : Trunc Nat) : Nat
  | trunc n => n


-- But we can define 'ex2' since 0 = 0 is in \Prop.
\func ex2 (t : Trunc Nat) : 0 = 0
  | trunc n => idp

\func Trunc-elim {A : \Type} {B : \Prop} (f : A -> B) (a : Trunc A) : B \elim a
  | trunc a => f a
-- The eliminator computes on constructor:
-- Trunc-elim f (trunc a) ===> f a

\func Nat-church => \Pi (X : \Type) -> (X -> X) -> X -> X

\func zero-church : Nat-church => \lam X f x => x
\func one-church : Nat-church => \lam X f x => f x
-- ...

\func Trunc' (A : \Type) : \Prop => \Pi (X : \Prop) -> (A -> X) -> X

\func trunc' {A : \Type} (a : A) : Trunc' A => \lam X f => f a

\func Trunc'-elim {A : \Type} {B : \Prop} (f : A -> B) (a : Trunc' A) : B
  => a B f

\data T (b : Bool) \with
  | true => tt

\func T-test (b : Bool) : \Prop => T b

\func T' (b : Bool) : \Type
  | true => \Sigma
  | false => Empty

\func T'-test (b : Bool) : \Prop => T' b

\truncated \data \fixr 2 Or (A B : \Type) : \Prop
  | inl A
  | inr B

\func \fixr 2 Or' (A B : \Type) : \Prop => Trunc (Either A B)

\func Or-rec {A B C : \Prop} (f : A -> C) (g : B -> C) (p : A `Or` B) : C \elim p
  | Or.inl a => f a
  | Or.inr b => g b

\func exists (A : \Type) (B : A -> \Prop) => Trunc (\Sigma (x : A) (B x))

\func image {A B : \Type} (f : A -> B) => \Sigma (b : B) (Trunc (\Sigma (a : A) (f a = b)))
-- image {Nat} {\Sigma} (\lam _ => ()) == \Sigma

\func image' {A B : \Type} (f : A -> B) => \Sigma (b : B) (\Sigma (a : A) (f a = b))
-- image' {Nat} {\Sigma} (\lam _ => ()) == Nat

-------------------------------------------------
-- Equality of types, iso
-------------------------------------------------

\func Equiv (A B : \Type) => \Sigma (f : A -> B)
                                    (g : B -> A)
                                    (\Pi (x : A) -> g (f x) = x)
                                    (\Pi (y : B) -> f (g y) = y)

\func equality=>equivalence (A B : \Type) (p : A = B) : Equiv A B =>
  transport (Equiv A) p (\lam x => x, \lam x => x, \lam x => idp, \lam x => idp)

\func equivalence=>equality (A B : \Type) (e : Equiv A B) : A = B =>
  path (iso e.1 e.2 e.3 e.4)

\func test (A B : \Type) (e : Equiv A B)
  : transport (\lam X => X) (equivalence=>equality A B e) = e.1
  => idp

-------------------------------------------------
-- An example of application of univalence
-------------------------------------------------

\data Dec (E : \Type)
  | yes E
  | no (E -> Empty)

\func DecEq (A : \Type) => \Pi (x y : A) -> Dec (x = y)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty => transport (\lam n => \case n \with { | 0 => Empty | suc _ => Unit }) p unit

-- We proved this earlier.
\func NatDecEq (x y : Nat) : Dec (x = y)
  | 0, 0 => yes idp
  | 0, suc y => no (\lam p => suc/=0 (inv p))
  | suc x, 0 => no suc/=0
  | suc x, suc y => \case NatDecEq x y \with {
    | yes p => yes (pmap suc p)
    | no c => no (\lam p => c (pmap pred p))
  }

\func isCountable (X : \Type) => Equiv Nat X

\func countableDecEq (X : \Type) (p : isCountable X) : DecEq X =>
  transport DecEq (equivalence=>equality Nat X p) NatDecEq

-------------------------------------------------
-- Implications of univalence for \Prop and \Set
-------------------------------------------------

\func propExt {A B : \Prop} (f : A -> B) (g : B -> A) : A = B =>
  equivalence=>equality A B (f, g, \lam x => Path.inProp _ _, \lam y => Path.inProp _ _)

\func absurd {A : \Type} (e : Empty) : A

\func not (x : Bool) : Bool
  | true => false
  | false => true

\func not-not (b : Bool) : not (not b) = b
  | true => idp
  | false => idp

\func true/=false (p : true = false) : Empty => absurd (transport T' p ())

\func Set-isNotSet (p : isSet \Set) : Empty =>
  \let
    -- We first prove equality between 'idp' and
    -- the equality, corresponding to 'not'.
    | idp=not =>
      p Bool Bool
        idp -- : Bool = Bool
        (equivalence=>equality Bool Bool (not, not, not-not, not-not)) -- : Bool = Bool
    -- Now we can prove the equality between the two bijections
    -- corresponding to 'idp' and 'not', that is that 'id'
    -- equals 'not'.
    | id=not : (\lam x => x) = not => pmap (transport (\lam X => X)) idp=not
    -- The contradiction follows easily.
  \in true/=false (pmap (\lam f => f true) id=not)

