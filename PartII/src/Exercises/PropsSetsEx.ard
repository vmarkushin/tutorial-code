\import Algebra.Meta
\import Equiv
\import Equiv.Univalence
\import Function.Meta
\import Homotopy.Fibration
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import PropsSets (MultipleOf3Or5, mod3, mod5)
\import HomUniverses (Dec, NatDecEq, Unit, pred, unit)
\import Sets (sigmaEq)

\data Bool | false | true

\data List (A : \Type) | nil | cons A (List A)

\func T (b : Bool) : \Type
  | true => \Sigma
  | false => Empty

\func isInj {A B : \Type} (f : A -> B) =>
  \Pi (x y : A) -> f x = f y -> x = y

\func isProp (A : \Type) => \Pi (x y : A) -> x = y

\func isSet (A : \Type) => \Pi (a a' : A) -> isProp (a = a')

\data \fixr 2 Either (A B : \Type)
  | inl A
  | inr B

\data Decide (A : \Type)
  | yes A
  | no (A -> Empty)

\func hasLevel (A : \Type) (suc-l : Nat) : \Type \elim suc-l
  | 0 => isProp A
  | suc suc-l => \Pi (x y : A) -> (x = y) `hasLevel` suc-l

-- 1. Let f : A -> B and g : B -> C be some functions.
--    Prove that if 'f' and 'g' are injective, then g `o` f is also injective.
--    Prove that if g `o` f is injective, then 'f' is also injective.

-- Composition of functions
\func \infixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type}
            (f : A -> B)
            (g : B -> C)
            (p : isInj f)
            (q : isInj g)
  : isInj (g o f)
  => \lam x y => p x y o q (f x) (f y)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g o f)) : isInj f
  => \lam x y => p x y o pmap g

-- 2. Define the predicate "divisible by 3 or by 5" in such a way that it is a proposition.
--    Prove that 'MultipleOf3Or5' embeds in â„•.

\func isMultipleOf3Or5 (n : Nat) : \Type => \case NatDecEq (mod3 n) 0, NatDecEq (mod5 n) 0 \with {
  | Dec.yes e, Dec.yes e1 => Unit
  | Dec.yes e, Dec.no _x => Unit
  | Dec.no _x, Dec.yes e => Unit
  | Dec.no _x, Dec.no _x1 => Empty
}
--    \let
--  \in \case NatDecEq (mod3 n) 0 \as e1, NatDecEq (mod5 n) 0 \as e2, idp : NatDecEq (mod3 n) 0 = e1, idp : NatDecEq (mod5 n) 0 = e2 \with {
--  | Dec.yes e, Dec.yes e1, p1, p2 => \let
--  | xx => rewrite p1 (rewrite p2 yy)
--  \in {?}
--  | Dec.yes e, Dec.no _x, p1, p2 => {?}
--  | Dec.no _x, Dec.yes e, p1, p2 => {?}
--  | Dec.no _x, Dec.no _x1, p1, p2 => {?}
--  }

-- NOTE: blya Valera zaebal. Admitted.
\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => {?}
--  | 0 => {?}
--  | 1 => {?}
--  | 2 => {?}
--  | 3 => {?}
--  | 4 => {?}
--  | 5 => {?}
--  | suc (suc (suc (suc (suc (suc n))))) => \lam x y => isMultipleOf3Or5-isProp n x y
--  => \lam x y => \let yy => unfold isMultipleOf3Or5 x \in \case \elim x, \elim y \with {
--    | 0, unit, unit => idp
--    | 3, unit, unit => idp
--    | 5, unit, unit => idp
--    | suc (suc (suc (suc (suc (suc n))))), x, y => isMultipleOf3Or5-isProp n
--  }

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => {?}

-- 3. We say that a type 'A' is trivial if there exists an element in 'A' such that it is equal to
--    any other element in 'A'.
--    Prove that 'A' is trivial iff 'A' is proposition and 'A' is inhabited.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A)
  => (\lam it => (\lam x y => inv (it.2 x) *> it.2 y, it.1), \lam x => (x.2, \lam a => x.1 x.2 a))

-- 4. Prove that 'Either' is not a proposition in general.

\func Either-isProp (p : \Pi
  {A B : \Type}
  (pA : isProp A)
  (pB : isProp B) -> isProp (Either A B)
) : Empty => {?}

-- 5. Prove that '\Sigma' preserves propositions.

\func Sigma-isProp {A : \Type} (pA : isProp A) (B : A -> \Type)
                   (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x))
  => \lam a b => sigmaEq B a b (pA a.1 b.1) (pB b.1 (transport B (pA a.1 b.1) a.2) b.2)

-- 6. Prove that <= and <=' are predicates.

\data <= (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (<= n m)

\data \infixl 9 <=' (n m : Nat) : \Set0 \elim m
  | suc m => <=-step (<=' n m)
  | m => <=-refl (n = m)

\func <=-isProp {n m : Nat} : isProp (<= n m) \elim n, m
  | 0, m => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam x y => \case \elim x, \elim y \with {}
  | suc n, suc m => \lam x y => \case \elim x, \elim y \with {
    | s<=s x, s<=s y => pmap s<=s (<=-isProp x y)
  }

-- In the proof of <='-isProp it is allowed to use the fact that Nat is set
-- without a proof. We will return to the proof of this fact later.
\func Nat-isSet : isSet Nat => {?}

\func <=D {n m : Nat} (p : n <=' m) : \Type
  | {n}, {suc m}, <=-step p => Unit
  | <=-refl p => Empty

--\func absurd {A : \Type} (e : Empty) : A

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty => transport (\lam n => \case n \with { | 0 => Empty | suc _ => Unit }) p unit

\func suc-sucks {n m : Nat} (p : (suc n) <=' (suc m)) : n <=' m \elim m
  | 0 => \case \elim p \with {
    | <=-step p => \case \elim p \with {
      | <=-refl p1 => absurd (suc/=0 p1)
    }
    | <=-refl p => rewrite (pmap pred p) (<=-refl idp)
  }
  | suc m => \case \elim p \with {
    | <=-step p => <=-step (suc-sucks p)
    | <=-refl p => rewrite (pmap pred p) (<=-refl idp)
  }

\func <='-sucn<=n {n : Nat} (p : (suc n) <=' n) : Empty \elim n
  | 0 => \case \elim p \with {
    | <=-refl p => suc/=0 p
  }
  | suc n => <='-sucn<=n (suc-sucks p)

\func <='-isProp {n m : Nat} : isProp (<=' n m) \elim m
  | 0 => \lam x y => \case \elim x, \elim y \with {
    | <=-refl p, <=-refl p1 => pmap <=-refl (Nat-isSet n 0 p p1)
  }
  | suc m => \lam x y => \case \elim x, \elim y \with {
    | <=-step x, <=-step y => pmap <=-step (<='-isProp x y)
    | <=-step x, <=-refl p => \let h => rewrite p x \in absurd (<='-sucn<=n h)
    | <=-refl p, <=-step y => \let h => rewrite p y \in absurd (<='-sucn<=n h)
    | <=-refl p, <=-refl p1 => pmap <=-refl (Nat-isSet n (suc m) p p1)
  }

-- 7. Prove that 'ReflClosure LessOrEq' is not a predicate, but 'ReflClosure (\lam x y => T (x < y))' is a predicate.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\func n<n (n : Nat) : (n < n) = false
  | 0 => idp
  | suc n => n<n n

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func <=RC {R : Nat -> Nat -> \Type} {n m : Nat} (p : ReflClosure R n m) : \Type
  | {R}, {_}, {_}, refl p => Unit
  | {R}, {_}, {_}, inc r => Empty

\func TisProp (b : Bool) : isProp (T b)
  | false => \lam _ y => absurd y
  | true => \lam x y => idp

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m)
  => \lam a b => \case \elim a, \elim b \with {
    | refl p, refl p1 => pmap refl (Nat-isSet n m p p1)
    | refl p, inc r => \let
      | zz => rewrite p r
      | zzz => rewrite (n<n m) zz
       \in absurd zzz
    | inc r, refl p => \let
      | zz => rewrite p r
      | zzz => rewrite (n<n m) zz
     \in absurd zzz
    | inc r, inc r1 => pmap inc $ TisProp (n < m) r r1
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure <= n m)) : Empty
  => transport <=RC (p 0 0 (refl idp) (inc z<=n)) unit

-- 8. Prove that if 'A' embeds in 'B' and 'B' is a proposition, then 'A' is proposition.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A
  => \lam a b => p a b (q (f a) (f b))

-- 9. Prove that a type with decidable equality is a set. Note that this implies 'isSet Nat' since
-- we have already proved that 'Nat' has decidable equality.

\func AxiomK (A : \Type) : \Type => \Pi (x : A) (p : x = x) -> p = idp

\func Set->K {A : \Type} (w : isSet A) : AxiomK A
  => \lam x p => (w x x) p idp

-- \func Jl {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type) (b : B a idp) {a' : A} (p : a = a') : B a' p \elim p

\func J
  {A : \Type} {a : A}
  (B : \Pi (a' : A) -> a = a' -> \Type)
  (b : B a idp)
  {a' : A} (p : a = a')
  : B a' p
  -- the details of the definition are not important for now
  => coe (\lam i => B (p @ i) (psqueeze p i)) b right
  \where
    \func psqueeze  {A : \Type} {a a' : A} (p : a = a') (i : I) : a = p @ i => path (\lam j => p @ I.squeeze i j)


\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (B a) (b a) p

\func K->Set {A : \Type} (w : AxiomK A) (a a' : A) (x y : a = a') : x = y \elim y
  | idp => w a x

-- it is Decide
-- \func LEM (A : \Type) : \Type => Not A `Either` A

\func DNE (A : \Type) : \Type => Not (Not A) -> A

\func Not-isProp {A : \Type} : isProp (Not A)
  => \lam _ _ => ext

\func DN-isProp {A : \Type} : isProp (Not (Not A))
  => \lam _ _ => ext

\func Decide->DNE {A : \Type} (p : Decide A) : DNE A \elim p
  | no  a => \lam z => absurd (z a)
  | yes b => \lam _ => b

--    P x
--             o
--     o       o
--     o   o   o
--     o o o o o o
--     | | | | | |
-- A   o o o o o o   --- base
--     x y z u v w
--
-- total space is Sigma (x : A) (P x)
-- Pi (x : A) -> P x

\func FiberMap {A : \Type} (P Q : A -> \Type) : \Type => \Pi (x : A) -> (P x -> Q x)

\func Total
  {A : \Type}
  {P Q : A -> \Type}
  (f : FiberMap P Q)
  (w : \Sigma (x : A) (P x))
  : \Sigma (x' : A) (Q x')
  => (w.1, f w.1 w.2)

--\func Total'
--  {A : \Type}
--  {P Q : A -> \Type}
--  (f : FiberMap P Q) :
--  \Sigma (x : A) (P x) -> \Sigma A (Q x))
--  => (w.1, f w.1 w.2)

\func Theorem272
  {A : \Type}
  {P : A -> \Type}
  (w w' : \Sigma (x : A) (P x))
  : (w = w') = (\Sigma (p : w.1 = w'.1) (transport P p w.2 = w'.2))
  => exts (\new QEquiv {
    | f q => rewrite q (idp, idp)
    | ret z => ext z
    | ret_f _ => idp
    | f_sec _ => idp
  })

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

--\func fib {A B : \Type}

\func Theorem476
  {A : \Type}
  (P Q : A -> \Type)
  (x : A)
  (v : Q x)
  (f : FiberMap P Q)
  : Fib (\lam a => (x, f x a)) (x, v) = Fib (\lam a => f x a) v
  => ext (\new QEquiv {
    | f q => (q.1, pmap (\lam xx => xx.2) q.2)
    | ret z => (z.1, pmap (\lam xx => (x, xx)) z.2)
    | ret_f z =>
      \let
        | qq => z.1
        | qq' => z.2
      \in ext (idp, {?})
    | f_sec _ => {?}
  })

\func Theorem477
  {A : \Type}
  (P Q : A -> \Type)
  (g : FiberMap P Q)
  (w : (\Sigma (x : A) (P x)) = (\Sigma (z : A) (Q z)))
  (y : A)
  : P y = Q y
  => ext (\new QEquiv {
    | f q => g y q
    | ret z =>
      \let
        | l => repl (inv w) (y, z)
        | r => transport (\lam x => x) w l
        | t => Total g l
        \in {?}
    | ret_f _ => {?}
    | f_sec _ => {?}
  })

\func Contr-Equiv
  {A B : \Type}
  (p : isTriv A)
  (q : isTriv B)
  : A = B
  => ext (\new QEquiv {
    | f _ => q.1
    | ret _ => p.1
    | ret_f => p.2
    | f_sec => q.2
  })

\func pmap-id {A : \Type} {a b : A} (p : a = b) : pmap (\lam x => x) p = p
  => idp

\func sigma-contr {A : \Type} {a : A} : isTriv (\Sigma (x : A) (x = a))
  => ((a, idp), \lam t => ext (inv t.2, simp_coe $ rewrite (pmap-id (inv t.2)) $ rewrite inv_*> idp))

\func Theorem722
  {A : \Type}
  (R : A -> A -> \Type)
  (RProp : \Pi (x y : A) -> isProp (R x y))
  (rho : \Pi (x : A) -> R x x)
  (g : \Pi (x y : A) -> R x y -> x = y)
  : \Sigma (z : isSet A) (\Pi (x y : A) -> R x y = (x = y))
  => ( {?}
  , \lam x y => Theorem477 (R __ y) (__ = y) (g __ y)
        ( Contr-Equiv ((y, rho y)
                      , \lam t => ext (inv (g t.1 y t.2), RProp _ _ _ _)) sigma-contr
        ) x
  )

\func DNE-eq->Set {A : \Type} (w : \Pi (x y : A) -> DNE (x = y)) : isSet A
  => (Theorem722 (\lam x y => Not (Not (x = y))) (\lam _ _ _ _ => ext) (\lam _ c => c idp) w).1

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => DNE-eq->Set (\lam x y => Decide->DNE (dec x y))

-- 10. Prove that if 'A' and 'B' are sets, then A `Either` B is also a set.

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Either A B) => {?}

-- 11. Prove that if 'B x' is a set, then '\Pi (x : A) -> B x' is a set.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 12. Prove that if 'A' is a set, then 'List A' is a set.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => {?}

-- 13. Prove that n-types are closed under \Pi-types.
--     Hint: Proof by induction. For the induction step 'suc n' one should prove that if 'f,g : \Pi (x : A) -> B x',
--           then 'f = g' is equivalent to '\Pi (x : A) -> f x = g x'.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}
